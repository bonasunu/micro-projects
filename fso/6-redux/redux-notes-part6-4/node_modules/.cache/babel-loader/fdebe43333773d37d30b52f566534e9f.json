{"ast":null,"code":"import noteService from '../services/notes';\n\nconst noteReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'NEW_NOTE':\n      return [...state, action.data];\n\n    case 'INIT_NOTES':\n      return action.data;\n\n    case 'TOGGLE_IMPORTANCE':\n      const id = action.data.id;\n      const noteToChange = state.find(n => n.id === id);\n      const changedNote = { ...noteToChange,\n        important: !noteToChange.important\n      };\n      return state.map(note => note.id !== id ? note : changedNote);\n\n    default:\n      return state;\n  }\n};\n\nexport const createNote = content => {\n  return async dispatch => {\n    const newNote = await noteService.createNew(content);\n    dispatch({\n      type: 'NEW_NOTE',\n      data: newNote\n    });\n  };\n};\nexport const toggleImportanceOf = id => {\n  return {\n    type: 'TOGGLE_IMPORTANCE',\n    data: {\n      id\n    }\n  };\n};\nexport const initializeNotes = () => {\n  return async dispatch => {\n    const notes = await noteService.getAll();\n    dispatch({\n      type: 'INIT_NOTES',\n      data: notes\n    });\n  };\n};\nexport default noteReducer;","map":{"version":3,"sources":["/home/bona/playground/fso/6-redux/redux-notes-part6-4/src/reducers/noteReducer.js"],"names":["noteService","noteReducer","state","action","type","data","id","noteToChange","find","n","changedNote","important","map","note","createNote","content","dispatch","newNote","createNew","toggleImportanceOf","initializeNotes","notes","getAll"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,UAAL;AACE,aAAO,CAAC,GAAGF,KAAJ,EAAWC,MAAM,CAACE,IAAlB,CAAP;;AACF,SAAK,YAAL;AACE,aAAOF,MAAM,CAACE,IAAd;;AACF,SAAK,mBAAL;AACE,YAAMC,EAAE,GAAGH,MAAM,CAACE,IAAP,CAAYC,EAAvB;AACA,YAAMC,YAAY,GAAGL,KAAK,CAACM,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASA,EAAzB,CAArB;AACA,YAAMI,WAAW,GAAG,EAClB,GAAGH,YADe;AAElBI,QAAAA,SAAS,EAAE,CAACJ,YAAY,CAACI;AAFP,OAApB;AAIA,aAAOT,KAAK,CAACU,GAAN,CAAUC,IAAI,IACnBA,IAAI,CAACP,EAAL,KAAYA,EAAZ,GAAiBO,IAAjB,GAAwBH,WADnB,CAAP;;AAGF;AACE,aAAOR,KAAP;AAhBJ;AAkBD,CAnBD;;AAqBA,OAAO,MAAMY,UAAU,GAAGC,OAAO,IAAI;AACnC,SAAO,MAAMC,QAAN,IAAkB;AACvB,UAAMC,OAAO,GAAG,MAAMjB,WAAW,CAACkB,SAAZ,CAAsBH,OAAtB,CAAtB;AACAC,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAE,UADC;AAEPC,MAAAA,IAAI,EAAEY;AAFC,KAAD,CAAR;AAID,GAND;AAOD,CARM;AAUP,OAAO,MAAME,kBAAkB,GAAIb,EAAD,IAAQ;AACxC,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAFD,GAAP;AAID,CALM;AAOP,OAAO,MAAMc,eAAe,GAAG,MAAM;AACnC,SAAO,MAAMJ,QAAN,IAAkB;AACvB,UAAMK,KAAK,GAAG,MAAMrB,WAAW,CAACsB,MAAZ,EAApB;AACAN,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,IAAI,EAAEgB;AAFC,KAAD,CAAR;AAID,GAND;AAOD,CARM;AAUP,eAAepB,WAAf","sourcesContent":["import noteService from '../services/notes'\n\nconst noteReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'NEW_NOTE':\n      return [...state, action.data]\n    case 'INIT_NOTES':\n      return action.data\n    case 'TOGGLE_IMPORTANCE':\n      const id = action.data.id\n      const noteToChange = state.find(n => n.id === id)\n      const changedNote = { \n        ...noteToChange, \n        important: !noteToChange.important \n      }\n      return state.map(note =>\n        note.id !== id ? note : changedNote \n      )\n    default:\n      return state\n  }\n}\n\nexport const createNote = content => {\n  return async dispatch => {\n    const newNote = await noteService.createNew(content)\n    dispatch({\n      type: 'NEW_NOTE',\n      data: newNote,\n    })\n  }\n}\n\nexport const toggleImportanceOf = (id) => {\n  return {\n    type: 'TOGGLE_IMPORTANCE',\n    data: { id }\n  }\n}\n\nexport const initializeNotes = () => {\n  return async dispatch => {\n    const notes = await noteService.getAll()\n    dispatch({\n      type: 'INIT_NOTES',\n      data: notes,\n    })\n  }\n}\n\nexport default noteReducer"]},"metadata":{},"sourceType":"module"}